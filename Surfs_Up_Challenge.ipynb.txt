# Dependencies
import numpy as np
import pandas as pd

# Python SQL toolkit and Object Relational Mapper
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func
engine = create_engine("sqlite:///hawaii.sqlite")

# reflect an existing database into a new model
Base = automap_base()
# reflect the tables
Base.prepare(engine, reflect=True)

# Save references to each table
Measurement = Base.classes.measurement
Station = Base.classes.station
# Create our session (link) from Python to the DB
session = Session(engine)

# 1. Import the sqlalchemy extract function.
from sqlalchemy import extract

# 2. Write a query that filters the Measurement table to retrieve the temperatures for the month of June. 
june = session.query(Measurement.date, Measurement.tobs).\
filter(extract('month',Measurement.date) ==6).all()

#  3. Convert the June temperatures to a list.
junetemps = list((june))

# 4. Create a DataFrame from the list of temperatures for the month of June. 
june_df = pd.DataFrame(junetemps,columns=['date','June Temps'])
june_df.set_index(june_df['date'], inplace=True)

# 5. Calculate and print out the summary statistics for the June temperature DataFrame.
june_df.describe()

# 6. Write a query that filters the Measurement table to retrieve the temperatures for the month of December.
december = session.query(Measurement.date, Measurement.tobs).\
filter(extract('month',Measurement.date) ==12).all()

# 7. Convert the December temperatures to a list.
dectemp = list((december))
# 8. Create a DataFrame from the list of temperatures for the month of December. 
dec_df = pd.DataFrame(dectemp,columns=['date','December Temps'])
dec_df.set_index(dec_df['date'], inplace=True)

# 9. Calculate and print out the summary statistics for the Decemeber temperature DataFrame.
dec_df.describe()

juneprcptemp = session.query(Measurement.date, Measurement.prcp, Measurement.tobs).\
filter(extract('month',Measurement.date) ==6).all()
junePT=list((juneprcptemp))
juneprcptemp_df = pd.DataFrame(junePT,columns=['date','June Precip','June Temps'])
juneprcptemp_df.set_index(juneprcptemp_df['date'],inplace=True)
juneprcptemp_df.describe()

decprcptemp = session.query(Measurement.date, Measurement.prcp, Measurement.tobs).\
filter(extract('month',Measurement.date) ==12).all()
decPT=list((decprcptemp))
decprcptemp_df = pd.DataFrame(decPT,columns=['date','December Precip','December Temps'])
decprcptemp_df.set_index(decprcptemp_df['date'],inplace=True)
decprcptemp_df.describe()

marprcptemp = session.query(Measurement.date, Measurement.prcp, Measurement.tobs).\
filter(extract('month',Measurement.date) ==3).all()
marPT=list((marprcptemp))
marprcptemp_df = pd.DataFrame(marPT,columns=['date','March Precip','March Temps'])
marprcptemp_df.set_index(marprcptemp_df['date'],inplace=True)
marprcptemp_df.describe()

seprcptemp = session.query(Measurement.date, Measurement.prcp, Measurement.tobs).\
filter(extract('month',Measurement.date) ==9).all()
sePT=list((seprcptemp))
seprcptemp_df = pd.DataFrame(sePT,columns=['date','September Precip','September Temps'])
seprcptemp_df.set_index(seprcptemp_df['date'],inplace=True)
seprcptemp_df.describe()